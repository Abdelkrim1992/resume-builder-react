// Mock Clerk functionality when Clerk is not available
// This allows the app to run in development without real authentication
import React from 'react';

// Create React prop types for the components
type ClerkComponentProps = {
  children?: React.ReactNode;
} & Record<string, any>;

// Mock user data
const mockUser = {
  id: 'mock-user-id',
  firstName: 'Demo',
  lastName: 'User',
  fullName: 'Demo User',
  username: 'demouser',
  primaryEmailAddress: { emailAddress: 'demo@example.com' },
  imageUrl: '',
  hasImage: false,
};

// Mock authentication state - can be toggled for testing
export const mockAuthState = {
  isSignedIn: false,
  user: mockUser,
};

// Mock Clerk hooks
export const useUser = (): { isSignedIn: boolean; user: typeof mockUser | null; isLoaded: boolean } => {
  return {
    isSignedIn: mockAuthState.isSignedIn,
    user: mockAuthState.isSignedIn ? mockAuthState.user : null,
    isLoaded: true,
  };
};

export const useAuth = (): { isSignedIn: boolean; userId: string | null; sessionId: string | null; getToken: () => Promise<string> } => {
  return {
    isSignedIn: mockAuthState.isSignedIn,
    userId: mockAuthState.isSignedIn ? mockAuthState.user.id : null,
    sessionId: mockAuthState.isSignedIn ? 'mock-session-id' : null,
    getToken: async () => 'mock-token',
  };
};

export const SignedIn: React.FC<ClerkComponentProps> = ({ children }) => {
  if (mockAuthState.isSignedIn) {
    return <>{children}</>;
  }
  return null;
};

export const SignedOut: React.FC<ClerkComponentProps> = ({ children }) => {
  if (!mockAuthState.isSignedIn) {
    return <>{children}</>;
  }
  return null;
};

export const SignInButton: React.FC<ClerkComponentProps> = (props) => {
  return (
    <button
      {...props}
      onClick={() => {
        // This would be replaced with a real sign-in flow
        // but for development, we just toggle the mock state
        mockAuthState.isSignedIn = true;
        window.location.reload();
      }}
    >
      Sign In
    </button>
  );
};

export const SignUpButton: React.FC<ClerkComponentProps> = (props) => {
  return (
    <button
      {...props}
      onClick={() => {
        // This would be replaced with a real sign-up flow
        // but for development, we just toggle the mock state
        mockAuthState.isSignedIn = true;
        window.location.reload();
      }}
    >
      Sign Up
    </button>
  );
};

export const UserButton: React.FC<ClerkComponentProps> = (props) => {
  return (
    <button
      {...props}
      onClick={() => {
        // This would show a dropdown in real implementation
        mockAuthState.isSignedIn = false;
        window.location.reload();
      }}
    >
      User
    </button>
  );
};

// This helps TypeScript understand that Clerk is available globally
declare global {
  interface Window {
    Clerk: any;
  }
}